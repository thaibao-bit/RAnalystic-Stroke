install.packages("GGally")
library(GGally)
df %>%
select(age, avg_glucose_level, bmi) %>%
drop_na() %>%
ggpairs()
runApp('testcode2.R')
ggplot(data, aes(x=!!sym(gender), y=age, fill = !!sym(gender))) +
geom_boxplot()
cat_cols = c(
'gender', 'hypertension', 'heart_disease',
'ever_married', 'work_type', 'Residence_type',
'smoking_status', 'stroke_t'
)
for (col in cat_cols){
print(ggplot(df, aes(x=!!sym(col), y=age, fill = !!sym(col))) +
geom_boxplot())
}
ggplot(df, aes(x=!!sym(col), y=age, fill = !!sym(col))) +
geom_boxplot()
ggplot(df, aes(x=!!sym(stroke_t), y=age, fill = !!sym(stroke_t))) +
geom_boxplot()
ggplot(df, aes(x=stroke_t, y=age, fill = stroke_t)) +
geom_boxplot()
ggplot(df, aes(x=gender, y=age, fill = gender)) +
geom_boxplot()
cat_cols = c(
'gender', 'hypertension', 'heart_disease',
'ever_married', 'work_type', 'Residence_type',
'smoking_status', 'stroke_t'
)
for (col in cat_cols){
print(ggplot(df, aes(x=!!sym(col), y=age, fill = !!sym(col))) +
geom_boxplot())
}
for (col in cat_cols){
print(ggplot(df, aes(x=!!sym(stroke_t), y=age, fill = !!sym(stroke_t))) +
geom_boxplot())
}
print(ggplot(df, aes(x=stroke_t, y=age, fill = stroke_t)) +
geom_boxplot())
print(ggplot(df, aes(x=work_type, y=age, fill = work_type)) +
geom_boxplot())
runApp('testcode2.R')
df$stroke_t <- ifelse(df$stroke == 1, 'stroke', 'no stroke')
df$stroke_t <- factor(df$stroke_t)
df$stroke_t <- ifelse(df$stroke == 1, 'stroke', 'no stroke')
df$stroke_t <- factor(df$stroke_t)
df$hypertension_t <- ifelse(df$hypertension == 1, 'hypertension', 'no hypertension')
df$hypertension_t <- factor(df$hypertension)
df$heart_disease_t <- ifelse(df$heart_disease == 1, 'heart disease', 'no heart disease')
df$heart_disease_t <- factor(df$heart_disease)
runApp('testcode2.R')
View(df)
df$hypertension_t <- ifelse(df$hypertension == 1, 'hypertension', 'no hypertension')
df$hypertension_t <- factor(df$hypertension)
df$heart_disease_t <- ifelse(df$heart_disease == 1, 'heart disease', 'no heart disease')
df$heart_disease_t <- factor(df$heart_disease)
str(df)
df$hypertension_t <- ifelse(df$hypertension == 1, 'hypertension', 'no hypertension')
df$hypertension_t <- factor(df$hypertension_t)
df$heart_disease_t <- ifelse(df$heart_disease == 1, 'heart disease', 'no heart disease')
df$heart_disease_t <- factor(df$heart_disease_t)
str(df)
runApp('testcode2.R')
df$gender_t <- factor(df$gender)
runApp('testcode2.R')
df$ever_married_t <- factor(df$ever_married)
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
print(dim(df[df$smoking_status == 4,]))
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
library(shiny); runApp('testcode2.R')
View(dotquy)
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
library(shiny); runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
ggplot(df, aes(x = bmi, fill = stroke_t))+
geom_density(alpha = 0.3)
runApp('testcode2.R')
runApp('testcode2.R')
ui = navbarPage("Navbar!",
tabPanel("Introduction",
titlePanel("Introduction"),
mainPanel(
h1("Báo cáo chuyên đề: Đề tài phân tích dữ liệu và dự đoán các ca bệnh đột quỵ"),
h2("Đột quỵ là gì?"),
p( toString(dotquy2[,1])),
h2("Các yếu tố gây nên đột quỵ?"),
p( toString(dotquy[,1])),
h3("Các triệu chứng nhận biết và điều nên làm?"),
img(class="img-polaroid",
style="width= 100px; height = 100px",
src="FAST.jpg"),
),
),
navbarMenu("About data",
tabPanel("Table",
DT::dataTableOutput("table")
),
tabPanel("Summary",
verbatimTextOutput("summary")
),
tabPanel("Multi Plot",
h2("Age, average glucose, Body mass index"),
plotOutput("multiPlot1"),
h2("WorkType"),
plotOutput("workPie")
),
tabPanel("Multi Plot 2",
sidebarLayout(
sidebarPanel(
selectInput(
inputId  = "multi2",
label = "Select plot",
choices = c(
'gender_t', 'hypertension_t', 'heart_disease_t',
'ever_married_t', 'work_type_t', 'Residence_type_t',
'smoking_status_t', 'stroke_t'
),
selected = "gender"
),
),
mainPanel(
plotOutput("multiPlot2")
)
)
),
),
navbarMenu("Some unrelated information",
tabPanel("Diabetes and BMI",
sidebarLayout(
sidebarPanel(
radioButtons("plotType", "Plot type",
c("Scatter"="p", "Line"="l")
),
),
mainPanel(
plotOutput("plot"),
p("Chi so BMI trung binh cua cac benh nhan bi dot quy la ", toString(strokedBMI), " va chi so BMI trung binh cua bo du lieu nay la " ,mean(stroke$bmi, na.rm = TRUE), "
va doi voi nguoi khoe manh, chi so BMI se giao dong tu:"),
img(class="img-polaroid",
style="width= 100px; height = 100px",
src="BMI.jpg"),
)
)
),
tabPanel("Hypertension effect to heart dicease?",
sidebarLayout(
sidebarPanel(
radioButtons(
inputId  = "hypertensionToHeart",
label = "Select Hypertenstion",
choices = c("Yes"=1, "No"=0),
selected = ""
),
),
mainPanel(
plotOutput("hypertensionToHeartPlot")
)
)
),
),
navbarMenu("Factors affecting stroke",
tabPanel("Age of stroke",
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "fromAge",
label = "Age from",
min = min(stroke$age, na.rm = TRUE),
max = max(stroke$age, na.rm = TRUE),
value = min(stroke$age, na.rm = TRUE)),
sliderInput(inputId = "toAge",
label = "To",
min = min(stroke$age, na.rm = TRUE),
max = max(stroke$age, na.rm = TRUE),
value = max(stroke$age, na.rm = TRUE)),
img(height="200px", width="300px", align="left",
src="DotQuyONguoiGia.jpg"),
),
mainPanel(
plotOutput("age3Plot"),
plotOutput("agePlot")
)
)
),
tabPanel("Gender of stroke",
sidebarLayout(
sidebarPanel(
selectInput(
inputId  = "gender",
label = "Select gender",
choices = unique(stroke$gender),
selected = ""
),
),
mainPanel(
plotOutput("genderPlot")
)
)
),
tabPanel("Hypertension of stroke",
sidebarLayout(
sidebarPanel(
radioButtons(
inputId  = "hypertension",
label = "Select Hypertenstion",
choices = c("Yes"=1, "No"=0),
selected = ""
),
),
mainPanel(
plotOutput("hypertensionPlot")
)
)
),
tabPanel("Heart of stroke",
sidebarLayout(
sidebarPanel(
radioButtons(
inputId  = "heart",
label = "Heart decease",
choices = c("Yes"=1, "No"=0),
selected = ""
),
),
mainPanel(
plotOutput("heartPlot")
)
)
),
tabPanel("Smoke effect to stroke",
sidebarLayout(
sidebarPanel(
radioButtons(
inputId  = "smoke",
label = "Smoke",
choices = unique(stroke$smoking_status),
selected = ""
),
),
mainPanel(
plotOutput("smokePlot")
)
)
),
tabPanel("Glucose of stroke",
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "fromGlucose",
label = "Glucose average from",
min = min(stroke$avg_glucose_level, na.rm = TRUE),
max = max(stroke$avg_glucose_level, na.rm = TRUE),
value = min(stroke$avg_glucose_level, na.rm = TRUE)),
sliderInput(inputId = "toGlucose",
label = "Glucose average to",
min = min(stroke$avg_glucose_level, na.rm = TRUE),
max = max(stroke$avg_glucose_level, na.rm = TRUE),
value = max(stroke$avg_glucose_level, na.rm = TRUE))
),
mainPanel(
plotOutput("glucosePlot")
)
)
),
tabPanel("BMI of stroke",
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "frombmi",
label = "BMI from",
min = min(stroke$bmi, na.rm = TRUE),
max = max(stroke$bmi, na.rm = TRUE),
value = min(stroke$bmi, na.rm = TRUE)),
sliderInput(inputId = "tobmi",
label = "To",
min = min(stroke$bmi, na.rm = TRUE),
max = max(stroke$bmi, na.rm = TRUE),
value = max(stroke$bmi, na.rm = TRUE)),
img( height="200px", width="300px", align="left",
src="Beo.jpg"),
),
mainPanel(
plotOutput("bmiPlot2"),
plotOutput("BMIPlot")
)
)
),
tabPanel("Work Type",
sidebarLayout(
sidebarPanel(
radioButtons(
inputId  = "work",
label = "Work Type",
choices = unique(stroke$work_type),
selected = ""
),
),
mainPanel(
plotOutput("workPlot")
)
)
),
tabPanel("Residence Type",
sidebarLayout(
sidebarPanel(
radioButtons(
inputId  = "residence",
label = "Residence Type",
choices = unique(stroke$Residence_type),
selected = ""
),
),
mainPanel(
plotOutput("residencePlot")
)
)
),
),
tabPanel("Prediction",
sidebarLayout(
sidebarPanel(
numericInput("age_p", "Your age:", 20, 1, 150),
selectInput(
inputId  = "gender_p",
label = "Select gender",
choices = c("Male"=1,"Female"=0),
selected = "Male"
),
selectInput(
inputId  = "worktype_p",
label = "Select work type",
choices = c( "Private"=1, "Self-employed"=2, "Govt_job"=3, "children"=4, "Never_worked"=5),
selected = "Self-employed"
),
selectInput(
inputId  = "residence_p",
label = "Live in?",
choices = c("Urban"=1,"Rural"=0),
selected = "Urban"
),
selectInput(
inputId  = "married_p",
label = "Married?",
choices = c("Yes"=1, "No"=0),
selected = "Yes"
),
selectInput(
inputId  = "smoke_p",
label = "Smoke?",
choices = c("formerly smoked"=1, "never smoked"=2, "smokes"=3, "Unknown"=4),
selected = "never smoked"
),
selectInput(
inputId  = "hypertension_p",
label = "Select Hypertenstion",
choices = c("Yes"=1, "No"=0),
selected = "No"
),
selectInput(
inputId  = "heart_p",
label = "Heart dicease",
choices = c("Yes"=1, "No"=0),
selected = "No"
),
sliderInput(inputId = "bmi_p",
label = "BMI",
min = min(df$bmi, na.rm = TRUE),
max = max(df$bmi, na.rm = TRUE),
value = mean(df$bmi, na.rm = TRUE)
),
sliderInput(inputId = "glucose_p",
label = "Average Glucose",
min = min(df$avg_glucose_level, na.rm = TRUE),
max = max(df$avg_glucose_level, na.rm = TRUE),
value = mean(df$avg_glucose_level, na.rm = TRUE)),
),
mainPanel(
textOutput("predict")
)
)
),
navbarMenu("More",
tabPanel("About",
fluidRow(
),
column(3,
img(class="img-polaroid",
src=paste0("https://upload.wikimedia.org/",
"wikipedia/commons/b/b4//",
"Blausen_0836_Stroke.png")),
tags$small(
"Source: Photographed at the Bay State Antique ",
"Automobile Club's July 10, 2005 show at the ",
"Endicott Estate in Dedham, MA by ",
a(href="http://commons.wikimedia.org/wiki/User:Sfoskett",
"User:Sfoskett")
)
)
)
)
runApp('testcode2.R')
runApp('testcode2.R')
newdata <- data.frame(gender = 1, age = 20, hypertension = 1, heart_disease = 1, work_type =2, Residence_type =1, avg_glucose_level = 150, bmi = 25)
probabilities <- model %>% predict(newdata, type = "response")*100
newdata <- data.frame(gender = 1, age = 80, hypertension = 1, heart_disease = 1, work_type =2, Residence_type =1, avg_glucose_level = 150, bmi = 25)
probabilities <- model %>% predict(newdata, type = "response")*100
model <- glm( stroke ~ gender + age + hypertension + heart_disease + work_type + Residence_type + avg_glucose_level + bmi,
data = df, family = binomial)
newdata <- data.frame(gender = 1, age = 80, hypertension = 1, heart_disease = 1, work_type =2, Residence_type =1, avg_glucose_level = 150, bmi = 25)
probabilities <- model %>% predict(newdata, type = "response")*100
model <- glm( stroke ~ gender + age + hypertension + heart_disease + work_type + Residence_type + avg_glucose_level + bmi,
data = df, family = binomial)
newdata <- data.frame(gender = 1, age = 20, hypertension = 1, heart_disease = 1, work_type =2, Residence_type =1, avg_glucose_level = 150, bmi = 25)
probabilities <- model %>% predict(newdata, type = "response")*100
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
library(shiny); runApp('testcode2.R')
library(shiny); runApp('testcode2.R')
library(shiny); runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
d1 <- read.csv("/home/bao/DataAnalysis/movie_data.csv")
View(d1)
hist <- qplot(d1$imdb_score, geom = "histogram", xlab = "Toan Hoc", ylab = "Count", fill=I("blue"),
col=I("red"),
binwidth = 1,
alpha=I(.5))
library(ggplot2)
hist <- qplot(d1$imdb_score, geom = "histogram", xlab = "Toan Hoc", ylab = "Count", fill=I("blue"),
col=I("red"),
binwidth = 1,
alpha=I(.5))
scale_color_manual(name = "statistics", values = c(mean = "red"))
hist <- qplot(d1$imdb_score, geom = "histogram", xlab = "Toan Hoc", ylab = "Count", fill=I("blue"),
col=I("red"),
binwidth = 1,
alpha=I(.5))+
scale_color_manual(name = "statistics", values = c(mean = "red"))
hist
box <- ggplot(d1, aes(x=d1$imdb_score)) +
geom_boxplot()
box
hist
hist <- qplot(d1$imdb_score, geom = "histogram", xlab = "IMDB score", ylab = "Count", fill=I("blue"),
col=I("red"),
binwidth = 1,
alpha=I(.5))+
scale_color_manual(name = "statistics", values = c(mean = "red"))
hist
library(shiny); runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
runApp('testcode2.R')
