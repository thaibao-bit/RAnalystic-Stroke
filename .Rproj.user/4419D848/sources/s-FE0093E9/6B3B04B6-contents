library(tidyverse)
library(tidymodels)
library(caret)
library(data.table)
library(ggplot2)
library(wesanderson)
library(ggridges)
library(ggpubr)
library(kableExtra)
library(corrplot)
library(modelsummary)
install.packages("GGally")
library(GGally)
library(wesanderson)
require()
data <- read.csv("/home/bao/DataAnalysis/stroke-data.csv")
sapply(stroke, class)

data$stroke_t <- ifelse(df$stroke == 1, 'stroke', 'no stroke')
str(data)
data$stroke_t <- factor(data$stroke_t)

ggplot(df, aes(x=gender, y=age, fill = gender)) +
  geom_boxplot()

cat_cols = c(
  'gender', 'hypertension', 'heart_disease',
  'ever_married', 'work_type', 'Residence_type',
  'smoking_status', 'stroke_t'
)
for (col in cat_cols){
  print(ggplot(df, aes(x=work_type, y=age, fill = work_type)) +
          geom_boxplot())
}

Age_plt3 <- data %>%
  ggplot() +
  geom_boxplot(aes(x = stroke, y = age, fill = stroke)) +
  coord_flip() +
  theme_minimal() +
  scale_fill_manual(values = c(wes_palette("Royal2")[2], wes_palette("Royal2")[5])) +
  labs(x = "Stroke", y = "Age (years)", title = "")

Age_plt3

ggarrange( Age_plt3,
          ncol = 1,
          nrow = 1)

Avg_glucose_level_plt2 <- data %>%
  ggplot() +
  geom_density_ridges_graddataidges_gradient(aes(x = avg_glucose_level, y = stroke, fill = stroke), scale = 2, rel_min_height = 0.001) +
  scale_fill_manual(values = c(wes_palette("Royal2")[2], wes_palette("Royal2")[5])) +
  theme_minimal() +
  labs(x = "Average Glucose Level", y = "Stroke" , title = "")

set.seed(7)
fit.lda <- train(stroke~., data=datatrain, method="lda", metric=metric, trControl=control)

datatrain <- stroke
datatrain$stroke <-
stroke$age_range <- stroke$age

getstroke <- split(stroke, cumsum(stroke$stroke == 1))
for (n in 1:dim(datatrain)[1]){
  if (datatrain[n,12] == 1 ) {
    datatrain[n,12] <- "yes"
  }
  else{
    datatrain[n,12] <- "no"
  }
}

#Change Stroke data to int
for (n in 1:dim(stroke)[1]){
  if (stroke[n,2] == "Male" ) {
    stroke[n,2] <- "1"
  }
  else{
    stroke[n,2] <- "0"
  }
}

for (n in 1:dim(stroke)[1]){
  if (stroke[n,3] < 3 ) {
    stroke[n,3] <- "1"
  }
  else{
    if (stroke[n,3] <12 & stroke[n,3] > 3)
    {
      stroke[n,3] <- "2"
    }
    else{
      if (stroke[n,3] < 20 & stroke[n,3] > 12)
      {
        stroke[n,3] <- "3"
      }
      else{
        if (stroke[n,3] < 40 & stroke[n,3] > 20)
        {
          stroke[n,3] <- "4"
        }
        else
        {
          stroke[n,3] <- "5"
        }
      }
    }


  }
}


results <- resamples(list(lda=fit.lda, cart=fit.cart))
summary(results)

# Stroke rate
ggplot(stroke, aes(x = stroke)) +
  geom_bar()

ggplot(stroke[stroke$heart_disease == 1,], aes(x = stroke))+
  geom_bar()

heart_disease_count <- dim(stroke[stroke$heart_disease == 1,])[1]
hd_stroke_count <- dim(stroke[stroke$heart_disease == 1 & stroke$stroke ==1 ,])[1]

stroke_rate <- hd_stroke_count/heart_disease_count*100
print(stroke_rate)

case_count <- dim(stroke)[1]
stroke_count <- dim(stroke[stroke$stroke == 1,])[1]
stroke_rate <- stroke_count/case_count*100
print(stroke_rate)



barplot(height=stroke$stroke, names=stroke$name)





ui =  fluidPage(titlePanel("Chan doan ca benh dot quy"),
                sidebarLayout(sidebarPanel(
                  selectInput(
                    inputId  = "gender",
                    label = "Select gender",
                    choices = unique(stroke$gender),
                    selected = ""
                  ),
                  selectInput(
                    inputId  = "work_type",
                    label = "Select work_type",
                    choices = unique(stroke$work_type),
                    selected = ""
                  ),
                  selectInput(
                    inputId  = "smoking_status",
                    label = "Select smoking status",
                    choices = unique(stroke$smoking_status),
                    selected = ""
                  ),
                  selectInput(
                    inputId  = "ever_married",
                    label = "Married yet?",
                    choices = unique(stroke$ever_married),
                    selected = ""
                  ),
                  sliderInput(
                    inputId = "age",
                    label = "Age",
                    min = min(stroke$age, na.rm = TRUE),
                    max = max(stroke$age, na.rm = TRUE),
                    value = min(stroke$age, na.rm = TRUE)
                  )
                ),
                mainPanel(tabsetPanel(
                  tabPanel("stroke", tableOutput("stroke")),
                  tabPanel("Summary", verbatimTextOutput("mysummary")),
                  tabPanel("IMDB Rating", verbatimTextOutput("imdb")),
                  tabPanel("Association Rule", tableOutput("associationrule")),
                  tabPanel("Chart", plotOutput("myplot"))


                ))))
server = function(input, output) {
  output$stroke = renderTable({
    stroke[stroke$gender == input$gender & stroke$work_type == input$work_type & stroke$age >= input$age & stroke$smoking_status == input$smoking_status & stroke$ever_married == input$ever_married  , ]
  })
  output$mysummary = renderPrint({
    sum(stroke$avg_glucose_level[stroke$gender == input$gender & stroke$work_type == input$work_type & stroke$age >= input$age])
  })
  output$imdb = renderPrint({
    mean(stroke$imdb_rating[stroke$gender == input$gender & stroke$work_type == input$work_type & stroke$age >= input$age])
  })
  output$associationrule = renderTable({
    inspect(sort(apriori(df[df$gender == input$gender, ])), by = "lift")
  })
  output$myplot  = renderPlot({
    ggplot(stroke[stroke$gender == input$gender & stroke$work_type == input$work_type & stroke$age >= input$age,], aes(x = stroke))+
      geom_bar()
  })

}
shinyApp(ui, server)
